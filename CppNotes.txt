Best Practices Only:
1_Basics.cpp
    Brace initialization gives better performance compared to normal initialization.
    \n is better than endl.
    Use snake case or camel case for variable names.
2_Functions.cpp
    Nested functions are not supported in c++. Error on line 5.
    Note the line no. 23 i.e same as int num = getValueFromUser();
3_ForwardDec.cpp
    It is also called as function prototyping or forward declaration.
    Like in line no. 3, it is best to forward declare it with the parameters and to not do just int add(int, int);
4_BasicsAboutNamespaces.cpp
    As u can see, there is ambiguity when using namespace std, because compiler doesn't know if it should call the 
    namespace or the function.
5_Macro.cpp
    Macros are resolved before compilation, that's why they're faster. Also called preprocessors. #include is a preprocessors
    and iostream is a header file.
    Three things you've to know in this is #define, #ifdef and #ifndef
    #define is self-explanatory
    #ifdef is basically if it is defined, execute code inside that block.
    #ifndef is basically if it is not defined, execute code inside that block.
6_HeaderFilesAndHeaderGuards Folder
    Always include header guards.
    Do not define variables and functions in header files.
    Give your header files the same name as the source files they’re associated with (e.g. grades.h is paired with grades.cpp).
    Do not #include .cpp files.
    Also, as you can see in those 3 files, thanks to header guards in .h file and even if you #include "square.h"
    in the other two files, it doesn't get included more than once.
    Anyway #include "square.h" in those two .cpp files are for those files to access the functions.
    To run it do, g++ main.cpp square.cpp (i.e add all the .cpp files)
7_ConstAndConstExp.cpp
    const datatype variable_name is the syntax for best practice.(line 4)
    From line 5 we can see that const variable has to be declared and initialized, otherwise error.
    We usually, make function parameters as const, obviously this doesn't makes sense when it is pass by value,
    because in pass by value a copy is passed, so even if you change the value, it doesn't matter.
    const vs constexpr is, const should be declared if the variable doesn't change during run time.
    constexpr should be declared if the variable doesn't change during compile time.
    Using constexp over macros is a best practice because, debugger can't find a macro, but it can find a constexp.
    constexpr can't be forward declared.
8_MoreAboutNamespace.cpp
    Namespaces are used to avoid naming collisions.
    Types:user-defined and global.
    global namespace are those that are provided by the compiler like std
    user-defined are the ones defined by user like goo and foo.
    Namespace aliasing example:   namespace boo = foo::goo;(goo is a namespace inside foo)
    Use namespaces when you are distributing code also, as you may or may not have followed good conventions in your
    code, so that might cause conflicts with other functions.
9_Auto.cpp
    Auto is also called type reference.
    Best practice is to not use auto for function return type
    Best to do it like line no.4
10_StaticCast.cpp
    static_cast needs the datatype it needs to convert to.
11_AnonymousAndInlineNamespace.cpp
    Anonymous namespaces are also called unnamed namespace.
    The Anonymous namespace declared in that file is available only in that file.
    You would create an inline namespace for the same purpose.
12_Strings.cpp
    line no.5 gives error for some reason.
    only while declaration and initialization brace initialization seems to be fine, while re-initialization it is giving
    error.
    cin is useless when the string contains whitespaces, it only reads until space.
    use getline instead.
13_Enum.cpp
    enums are used for code readability.
    The problem with enums is that variables inside the enums are visible to the global scope.(check the commented code)
    Use enum class for this problem.
    enums can be declared either inside the main or outside it doesn't matter.
14_EnumClass.cpp
    They're also called scoped enums as the variables inside enum are local to that specific enum.
15_Arrays.cpp
    int array[5]{ 0, 1, 2, 3, 4 }; // explicitly define the length of the array
    int array[]{ 0, 1, 2, 3, 4 }; // let the initializer list set length of the array
    Variables passed to a function are actually pass by value and the arrays passed to a function are actually pass
    by pointer by default for some reason.
    Also, for the same reason, getting the length of the array inside the main function is fine, but trying to get the 
    size of an array passed to a function, actually returns the size of a pointer.

    If you don't wanna change the array parameters, use const.
    // even though prime is the actual array, within this function it should be treated as a constant
    void passArray(const int prime[5])
    {
        // so each of these lines will cause a compile error!
        prime[0] = 11;
        prime[1] = 7;
        prime[2] = 5;
        prime[3] = 3;
        prime[4] = 2;
    }

    Finding length of array.
    #include <iostream>
 
    void printSize(int array[])
    {
        std::cout << sizeof(array) / sizeof(array[0]) << '\n';
    }
    
    int main()
    {
        int array[]{ 1, 1, 2, 3, 5, 8, 13, 21 };
        std::cout << sizeof(array) / sizeof(array[0]) << '\n';
        printSize(array);
    
        return 0;
    }
    8    //length of the array.
    2    //length of the pointer.
16_Pointers.cpp
    A pointer holds the address of the variable it points to.
    When declaring a pointer variable, put the asterisk next to the variable name.
    When declaring a function, put the asterisk of a pointer return value next to the type.
    Just like normal variables, pointers are not initialized when declared. If not initialized with a value, they will contain garbage.
    The type of the pointer has to match the type of the variable being pointed to(line no.17-20)
    ptr is the same as &value
    *ptr is treated the same as value
    Basically to back what I just said rn, you can see in line no.39 to point the pointer to a different variable there is no *.
    But, when you wanna change the value it holds, you need *.(line no.45)
    Use of pointers:
    1) Arrays are implemented using pointers. Pointers can be used to iterate through an array (as an alternative to array indices) 
    2) They are the only way you can dynamically allocate memory in C++  This is by far the most common use case for pointers.
    3) They can be used to pass a large amount of data to a function in a way that doesn’t involve copying the data(which is inefficient).
    4) They can be used to pass a function as a parameter to another function.
    5) They can be used to achieve polymorphism when dealing with inheritance.
    6) They can be used to have one struct/class point at another struct/class, to form a chain. This is useful in some more advanced data structures, such as linked lists and trees.

